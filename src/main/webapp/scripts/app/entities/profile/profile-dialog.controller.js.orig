'use strict';

var app = angular.module('profinetApp').controller('ProfileDialogController',
    ['$scope', '$stateParams', '$modalInstance', 'Expert', 'Field', 'Keyword', 'KeywordsByName', 'ExpertField', 'Language', 'User', 'Principal',
        function($scope, $stateParams, $modalInstance, Expert, Field, Keyword, KeywordsByName, ExpertField, Language, User, Principal) {

		$scope.mynewfield = [];
		
		$scope.load = function() {
		Principal.identity().then(function(account) {    
				$scope.account = account;
				$scope.id = $scope.account.login;	
				// get actual login expert info
				Expert.get({id: $scope.id}, function(result) {
					if (result != null) { 	
						$scope.exp = result;
<<<<<<< working copy
						$scope.selectedKeywords= $scope.exp.expertkeywords.slice(0);
						$scope.selectedKeywords.reverse();
=======
						// get actual login user info
>>>>>>> destination
						User.get({login: $scope.account.login}, function(result) {
							if (result != null) { 	
								$scope.user = result;
								$scope.exp.expertuser = $scope.user;
							}
							
							$scope.myexpertfields = [];
							// load the own expertfields
							for (var i = 0; i < $scope.expertfields.length; ++i) {
								if ($scope.expertfields[i].expert.id == $scope.exp.id) {
									$scope.myexpertfields.push($scope.expertfields[i]);
								}
							}
							$scope.myexpertfields.push(new ExpertField());	
						});	
					} 
				});		
			});
		};

        $scope.fields = Field.query();
        $scope.languages = Language.query();
        $scope.users = User.query();
		$scope.keywords = Keyword.query();
		$scope.expertfields = ExpertField.query();
		$scope.deletedFields = [];
		$scope.fields = Field.query();
		
		$scope.load();
		
		$scope.addNewExpertFieldBox = function() {
			alert("addd new field box");
			
			var newItemNo = $scope.myexpertfields.length + 1;
			$scope.myexpertfields.push(new ExpertField());
		};
	
		$scope.addExpertField = function() {
			var lastItemOfExpertField = $scope.myexpertfields.length - 1;
			$scope.myexpertfields[lastItemOfExpertField].expert = $scope.exp;
			$scope.myexpertfields[lastItemOfExpertField].field = $scope.mynewfield;
			
			$scope.addNewExpertFieldBox();
		}
		
		$scope.removeExpertField = function(index) {
			var lastItemOfExpertField = $scope.myexpertfields.length - 1;
			
			$scope.obj = $scope.myexpertfields[index];
			alert($scope.obj.id);
			
			if ($scope.obj.id != undefined) {
				$scope.deletedFields.push($scope.obj);
			}
			
			var obj = $scope.myexpertfields.splice(index, 1);
			alert("REMOVED");
			
		};
			
		$scope.writeExpFields = function() {
			for (var i = 0; i < $scope.myexpertfields.length; ++i) {
				alert($scope.myexpertfields[i].description);
			}
		}
		
        var onSaveFinished = function (result) {
            $scope.$emit('profinetApp:expertUpdate', result);
            $modalInstance.close(result);
        };

        $scope.save = function () {
		//	$scope.writeExpFields();
		
<<<<<<< working copy
		
		
		$scope.arrayObjectIndexOf = function arrayObjectIndexOf(myArray, searchTerm) {
			if (myArray != null){ // angular loads the object in later, and the .length will give an error on an undefined object sometimes
=======
			var lastItemOfExp = $scope.myexpertfields.length - 1;
			$scope.myexpertfields.splice(lastItemOfExp);
			
			alert($scope.exp.id);
			if ($scope.exp.id == undefined) {
				alert("save");
				Expert.save($scope.exp, onSaveFinished);
			} else {
				alert("update");
		        Expert.update($scope.exp, onSaveFinished);
			}
			
			for (var i = 0; i < $scope.myexpertfields.length; ++i) {
				if ($scope.myexpertfields[i].id == undefined) {
					alert("save field");
					ExpertField.save($scope.myexpertfields[i]);
				} else {
					alert("update field");
					ExpertField.update($scope.myexpertfields[i]);	
				}
			}
			
			for (var i = 0; i < $scope.deletedFields.length; ++i) {
				alert("delete: " + $scope.deletedFields[i].id);
				$scope.confirmDelete($scope.deletedFields[i].id);					
			}
			
        };

        $scope.confirmDelete = function (id) {
            ExpertField.delete({id: id},
                function () {
                    $scope.loadAll();
                    $('#deleteExpertFieldConfirmation').modal('hide');
                    $scope.clear();
                });
        };

        $scope.clear = function() {
            $modalInstance.dismiss('cancel');
        };
        
        $scope.arrayObjectIndexOf = function arrayObjectIndexOf(myArray, searchTerm) {
			if (myArray != null){ // angular loads the object in later, and the .length will give an error on an undefined object
>>>>>>> destination
				for(var i = 0, len = myArray.length; i < len; i++) {
					if (myArray[i].name === searchTerm) return i;
				}
			}
			return -1;
		}

		
		$scope.toggleSelection = function toggleSelection(language) {
			
			var idx = $scope.arrayObjectIndexOf($scope.exp.expertlanguages, language.name);
			if (idx > -1) {			
				$scope.exp.expertlanguages.splice(idx, 1);
			}
			else {
				$scope.exp.expertlanguages.push(language);
			}
		};
		
<<<<<<< working copy
        $scope.save = function () {
            if ($scope.exp.id == undefined) {
				$scope.saveKeywords();
				Expert.save($scope.exp, onSaveFinished);
			} else {
				$scope.saveKeywords();
		        Expert.update($scope.exp, onSaveFinished);

			}
        };
		
=======
>>>>>>> destination
		$scope.getKeywordsByName = function(keywordname) {
			var keywords = []
			KeywordsByName.get({name: keywordname}, function(result) {
				if (result !== null){
					keywords = result;
				};
			});
			return keywords;
		};
		
		$scope.saveKeywords = function(){
			for (var i=0;i<$scope.selectedKeywords.length;i++){
				if ($scope.selectedKeywords[i].id === -1){
					var currentKeyword = $scope.selectedKeywords[i];
					currentKeyword.id = null;
					Keyword.save(currentKeyword);
					KeywordsByName.get({name: $scope.selectedKeywords[i].name}, function(result) {
						if (result != null) { 	
							$scope.selectedKeywords[i] = result;
						} 		
					});
				};
			};
			$scope.exp.expertkeywords = $scope.selectedKeywords.slice(0);
			$scope.exp.expertkeywords.reverse();
		};
		
		<!-- This is where the autocomplete's miracle happens :) -->
		
		$scope.suggestions=[];

        $scope.selectedIndex=-1;

        $scope.removeTag=function(index){
            $scope.selectedKeywords.splice(index,1);
        }

        $scope.search=function(){
            KeywordsByName.get({name: $scope.searchText}, function(result) {
				if (result != null) { 	
					if($scope.arrayObjectIndexOf(result, $scope.searchText)===-1){
						result.unshift({id: null, name:$scope.searchText});
					}
					$scope.suggestions=result;
					$scope.selectedIndex=-1;
				} 		
			});
		}
<<<<<<< working copy
=======


}]);

app.directive('autoComplete', ['KeywordsByName', function(KeywordsByName){
    return {
        restrict:'AE',
        //$scope: {
        //    selectedTags:'=model'
        //},
		
        templateUrl:'/scripts/app/entities/profile/autocomplete-template.html',
        link:function(scope,elem,attrs){
            scope.suggestions=[];
>>>>>>> destination

        $scope.addToSelectedTags=function(index){
            if($scope.arrayObjectIndexOf($scope.exp.selectedkeywords, $scope.suggestions[index].name)===-1){
				$scope.selectedKeywords.push($scope.suggestions[index]);
                $scope.searchText='';
                $scope.suggestions=[];
            }
        }

        $scope.checkKeyDown=function(event){
            if(event.keyCode===40){
                event.preventDefault();
                if($scope.selectedIndex+1 !== $scope.suggestions.length){
                    $scope.selectedIndex++;
                }
            }
            else if(event.keyCode===38){
                event.preventDefault();
                if($scope.selectedIndex-1 !== -1){
                    $scope.selectedIndex--;
                }
            }
            else if(event.keyCode===13){
                $scope.addToSelectedTags($scope.selectedIndex);
            }
        }

        $scope.$watch('selectedIndex',function(val){
            if(val!==-1) {
                $scope.searchText = $scope.suggestions[$scope.selectedIndex].name;
            }
        });
		
		var onSaveFinishedKeyword = function (result) {
            $scope.$emit('profinetApp:keywordUpdate', result);
        };

<<<<<<< working copy
	}])=======

			

>>>>>>> destination
